package git;

import java.util.Scanner;

public class TranscriptMaker {
	private static String[] courses = new String[20];
	private static double[] credits = new double[20];
	private static String[] grades = new String[20];
	
	private static int count = 0;


	public static void main(String[] args) {
		System.out.println("Hello! Welcome to the transcript maker.");
		takeInput();
		processInput();
		showTranscript();
		
//		String s = "Hello World! 3 + 3.0 = 6 ";
//
//	      // create a new scanner with the specified String Object
//	      Scanner scanner = new Scanner(s);
//
//	      // find the next token and print it
//	      System.out.println("" + scanner.next());
//
//	      // find the next token and print it
//	      System.out.println("" + scanner.next());
//	      String x = scanner.next();
//	      System.out.println(x);
//	      System.out.println("" + scanner.next());
//	      System.out.println("" + scanner.next());
//	      System.out.println("" + scanner.next());
//	      System.out.println("" + scanner.next());
//	      System.out.println("" + scanner.next());
//	      System.out.println("" + scanner.next());
//
//	      // close the scanner
//	      scanner.close();

	}

	private static void takeInput() {
		boolean isFinished = false;
//		String courseName;
//		double creditNum;
//		String courseGrade;
		Scanner scanner = new Scanner(System.in);
		
		while (!isFinished)
		{
			System.out.println("Please input your course, the course's credits, and your grade for that course.");
			System.out.println("Example: English 4 A");
//			courseName = scanner.next();
			courses[count] = scanner.next();
//			creditNum = Double.parseDouble(scanner.next());
			credits[count] = Double.parseDouble(scanner.next());
//			courseGrade = scanner.next();
			grades[count++] = scanner.next();
			
			System.out.println("Great! Is that all of your courses?");
			if (scanner.nextLine().equalsIgnoreCase("yes"))
				isFinished = true;
			
		}
	}
	
	private static void processInput() {
		
	}
	
	private static void showTranscript() {
		
	}

}
